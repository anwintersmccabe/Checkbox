[{"/Users/annabelwinters-mccabe/Documents/GitHub/note-app/client/src/index.js":"1","/Users/annabelwinters-mccabe/Documents/GitHub/note-app/client/src/App.js":"2","/Users/annabelwinters-mccabe/Documents/GitHub/note-app/client/src/components/InputTodo.js":"3","/Users/annabelwinters-mccabe/Documents/GitHub/note-app/client/src/components/ListTodos.js":"4","/Users/annabelwinters-mccabe/Documents/GitHub/note-app/client/src/components/EditTodos.js":"5"},{"size":168,"mtime":1610592164052,"results":"6","hashOfConfig":"7"},{"size":344,"mtime":1610594309662,"results":"8","hashOfConfig":"7"},{"size":947,"mtime":1610653154395,"results":"9","hashOfConfig":"7"},{"size":2337,"mtime":1610652946126,"results":"10","hashOfConfig":"7"},{"size":2352,"mtime":1610597789453,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"slq91d",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"14"},"/Users/annabelwinters-mccabe/Documents/GitHub/note-app/client/src/index.js",[],["24","25"],"/Users/annabelwinters-mccabe/Documents/GitHub/note-app/client/src/App.js",[],"/Users/annabelwinters-mccabe/Documents/GitHub/note-app/client/src/components/InputTodo.js",["26"],"/Users/annabelwinters-mccabe/Documents/GitHub/note-app/client/src/components/ListTodos.js",["27"],"/Users/annabelwinters-mccabe/Documents/GitHub/note-app/client/src/components/EditTodos.js",["28"],"import React, { Fragment, useState } from \"react\";\n\nconst EditTodo = ({ todo }) => {\n  const [description, setDescription] = useState(todo.description);\n\n  //edit description function\n\n  const updateDescription = async e => {\n    e.preventDefault();\n    try {\n      const body = { description };\n      const response = await fetch(\n        `http://localhost:5000/todos/${todo.todo_id}`,\n        {\n          method: \"PUT\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(body)\n        }\n      );\n\n      window.location = \"/\";\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  return (\n    <Fragment>\n      <button\n        type=\"button\"\n        class=\"btn btn-warning\"\n        data-toggle=\"modal\"\n        data-target={`#id${todo.todo_id}`}\n      >\n        Edit\n      </button>\n\n      {/*\n        id = id10\n      */}\n      <div\n        class=\"modal\"\n        id={`id${todo.todo_id}`}\n        onClick={() => setDescription(todo.description)}\n      >\n        <div class=\"modal-dialog\">\n          <div class=\"modal-content\">\n            <div class=\"modal-header\">\n              <h4 class=\"modal-title\">Edit To-Do</h4>\n              <button\n                type=\"button\"\n                class=\"close\"\n                data-dismiss=\"modal\"\n                onClick={() => setDescription(todo.description)}\n              >\n                &times;\n              </button>\n            </div>\n\n            <div class=\"modal-body\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                value={description}\n                onChange={e => setDescription(e.target.value)}\n              />\n            </div>\n\n            <div class=\"modal-footer\">\n              <button\n                type=\"button\"\n                class=\"btn btn-warning\"\n                data-dismiss=\"modal\"\n                onClick={e => updateDescription(e)}\n              >\n                Edit\n              </button>\n              <button\n                type=\"button\"\n                class=\"btn btn-danger\"\n                data-dismiss=\"modal\"\n                onClick={() => setDescription(todo.description)}\n              >\n                Close\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default EditTodo;\n",{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":11,"column":13,"nodeType":"35","messageId":"36","endLine":11,"endColumn":21},{"ruleId":"33","severity":1,"message":"37","line":16,"column":13,"nodeType":"35","messageId":"36","endLine":16,"endColumn":23},{"ruleId":"33","severity":1,"message":"34","line":12,"column":13,"nodeType":"35","messageId":"36","endLine":12,"endColumn":21},"no-native-reassign",["38"],"no-negated-in-lhs",["39"],"no-unused-vars","'response' is assigned a value but never used.","Identifier","unusedVar","'deleteTodo' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]